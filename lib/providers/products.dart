// ignore_for_file: prefer_final_fields, unused_element, dead_code

import 'dart:convert'; //to convert an object to json

import 'package:flutter/material.dart';
import 'package:http/http.dart'
    as http; //just for dealing with unnecessary name clashes  (http.(method/attributes))
import '../models/http_exception.dart';
import 'product.dart';

class Products with ChangeNotifier {
  List<Product> _items = [
    // Product(
    //   id: 'p1',
    //   title: 'Red Shirt',
    //   description:
    //       'This vibrant red shirt is a must-have for your wardrobe. Its eye-catching color is sure to make a statement wherever you go. Made with high-quality fabric, this shirt offers both comfort and style. Whether you\'re dressing up for a special occasion or simply want to add a pop of color to your everyday outfits, this red shirt is the perfect choice.',
    //   price: 29.99,
    //   imageUrl:
    //       'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS0jBkKnkALj6QYgO-h74Q2d1mIEaKu75XyPn0_yGsj8It0pPWcaTLmdMHzn8jRyTRFo6I&usqp=CAU',
    // ),
    // Product(
    //   id: 'p2',
    //   title: 'Trousers',
    //   description:
    //       ' Elevate your style with these sleek and fashionable trousers. Designed with a modern fit, they offer both comfort and sophistication. Made from high-quality materials, these trousers are built to last. Whether you\'re dressing up for a formal event or want to look sharp at the office, these trousers are a versatile addition to your wardrobe.',
    //   price: 59.99,
    //   imageUrl:
    //       'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Trousers%2C_dress_%28AM_1960.022-8%29.jpg/512px-Trousers%2C_dress_%28AM_1960.022-8%29.jpg',
    // ),
    // Product(
    //   id: 'p3',
    //   title: 'Yellow Scarf',
    //   description:
    //       'Stay warm and cozy during the winter months with this beautiful yellow scarf. Made from soft and luxurious fabric, it provides excellent insulation against the cold weather. The vibrant yellow color adds a touch of cheer to any outfit, while the generous length allows for various styling options. Wrap yourself in comfort and style with this must-have winter accessory.',
    //   price: 19.99,
    //   imageUrl:
    //       'https://live.staticflickr.com/4043/4438260868_cc79b3369d_z.jpg',
    // ),
    // Product(
    //   id: 'p4',
    //   title: 'A Pan',
    //   description:
    //       'Cook up a storm with this versatile pan. Whether you\'re a professional chef or a cooking enthusiast, this pan is a kitchen essential. Made from durable materials, it offers excellent heat distribution for even cooking. With its spacious design, you can prepare a wide range of meals, from stir-fries to pancakes. Upgrade your cooking experience with this reliable and high-performance pan',
    //   price: 49.99,
    //   imageUrl:
    //       'https://upload.wikimedia.org/wikipedia/commons/thumb/1/14/Cast-Iron-Pan.jpg/1024px-Cast-Iron-Pan.jpg',
    // ),
  ];
  // bool _showFavoritesOnly = false;
  final String? authToken;
  final String? userId;

  Products(this.authToken, this.userId, this._items);
  List<Product> get items {
    // if (_showFavoritesOnly)
    //   return _items.where((element) => element.isFavourite == true).toList();
    return [..._items]; //sending a copy of list using spread operator
  }

  List<Product> get FavouritesItems {
    return _items.where((element) => element.isFavourite == true).toList();
  }

  // void showFavouritesOnly() {
  //   _showFavoritesOnly = true;
  //   notifyListeners();
  // }

  // void showAll() {
  //   _showFavoritesOnly = false;
  //   notifyListeners();
  // }

  Product getId(String id) {
    return items.firstWhere((element) => element.id == id);
  }

  /*  //this is also right
  Future<void> addProduct(Product product) {
    final url = Uri.parse('https://myshop-3abca-default-rtdb.firebaseio.com/products.json');
   return http.post(url , body: //here we can't pass an object of a class directly so we are using json , and json.encode accepts a map so we r passing a map which resembles with product
    json.encode({      
      'title': product.title,
      'description': product.description,
      'imageUrl': product.imageUrl,
      'price': product.price,
      'isFavorite': product.isFavourite,
    }),).then((response)  {
       final newProduct = Product(
      title: product.title,
      description: product.description,
      price: product.price,
      imageUrl: product.imageUrl,
      id: json.decode(response.body)['name'],   //this is a unique id generated by firebase
    );
    _items.add(newProduct);
    // _items.insert(0, newProduct); // at the start of the list
    notifyListeners();
    }).catchError((error) {
      // print(error);
      throw error;
    });
   
  }  */

//here we have alternative of then and catch error
  Future<void> addProduct(Product product) async {
    final url = Uri.parse(
        'https://myshop-3abca-default-rtdb.firebaseio.com/products.json?auth=$authToken');
    try {
      print('*********************here in add product');
      // print(product.orders);
      final response = await http.post(
        url,
        body: json.encode({
          'title': product.title,
          'description': product.description,
          'imageUrl': product.imageUrl,
          'price': product.price,
          'creatorId': userId,
          // 'orders': product.orders
          // 'isFavorite': product.isFavourite,
        }),
      );
      final newProduct = Product(
          title: product.title,
          description: product.description,
          price: product.price,
          imageUrl: product.imageUrl,
          id: json.decode(response.body)['name'],
          // orders: []
          );
      _items.add(newProduct);
      // _items.insert(0, newProduct); // at the start of the list
      notifyListeners();
    } catch (error) {
      // print(error);
      throw error;
    }
  }

  Future<void> fetchAndSetProducts([bool filterByUser = false]) async {
    final filterString =
        filterByUser ? 'orderBy="creatorId"&equalTo="$userId"' : '';
    //  print(filterString);
    var url = Uri.parse(
        'https://myshop-3abca-default-rtdb.firebaseio.com/products.json?auth=$authToken&$filterString');
    try {
      // print('yhn upper hu ');
      final response = await http.get(url);
      final extractedData = json.decode(response.body) as Map<String, dynamic>;
      if (extractedData == null) {
        return;
      }
      // print('yhn niche hu ');
      // print(extractedData);

      url = Uri.parse(
          'https://myshop-3abca-default-rtdb.firebaseio.com/userFavourites/$userId.json?auth=$authToken');

      final favoriteResponse = await http.get(url);
      final favoriteData = json.decode(favoriteResponse.body);
      final List<Product> loadedProducts = [];
      extractedData.forEach((prodId, prodData) {
        loadedProducts.add(Product(
            id: prodId,
            title: prodData['title'],
            description: prodData['description'],
            price: prodData['price'].toDouble(),
            isFavourite:
                favoriteData == null ? false : favoriteData[prodId] ?? false,
            imageUrl: prodData['imageUrl'],
            // orders: prodData['orders']
            ));
      });
      _items = loadedProducts;
      notifyListeners();
    } catch (error) {
      throw error;
    }
  }

  Future<void> updateProduct(String id, Product newProduct) async {
    final prodIndex = _items.indexWhere((prod) => prod.id == id);
    if (prodIndex >= 0) {
      final url = Uri.parse(
          'https://myshop-3abca-default-rtdb.firebaseio.com/products/$id.json?auth=$authToken');
      await http.patch(url,
          body: json.encode({
            'title': newProduct.title,
            'description': newProduct.description,
            'imageUrl': newProduct.imageUrl,
            'price': newProduct.price
          }));
      _items[prodIndex] = newProduct;
      notifyListeners();
    } else {
      print('...');
    }
  }

  Future<void> deleteProduct(String id) async {
    final url = Uri.parse(
        'https://myshop-3abca-default-rtdb.firebaseio.com/products/$id.json?auth=$authToken');
    final existingProductIndex = _items.indexWhere((prod) => prod.id == id);
    Product? existingProduct = _items[existingProductIndex];
    _items.removeAt(existingProductIndex);
    notifyListeners();
    final response = await http.delete(url);
    if (response.statusCode >= 400) {
      _items.insert(existingProductIndex, existingProduct);
      notifyListeners();
      throw HttpException('Could not delete product.');
    }
    existingProduct = null;
  }
}
